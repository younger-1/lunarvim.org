"use strict";(self.webpackChunkLunarVim_com=self.webpackChunkLunarVim_com||[]).push([[4193],{9187:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-344cbee8",path:"/languages/rust.html",title:"Rust",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Install Syntax Highlighting",slug:"install-syntax-highlighting",children:[]},{level:2,title:"Install Language Server",slug:"install-language-server",children:[]},{level:2,title:"Formatters",slug:"formatters",children:[]},{level:2,title:"LSP Settings",slug:"lsp-settings",children:[]},{level:2,title:"Debugger",slug:"debugger",children:[]},{level:2,title:"Extra Plugins",slug:"extra-plugins",children:[]}],filePathRelative:"languages/rust.md",git:{updatedTime:1634810284e3,contributors:[{name:"Abouzar Parvan",email:"abzcoding@users.noreply.github.com",commits:1},{name:"Bram",email:"bram.hoendervangers@gmail.com",commits:1},{name:"abzcoding",email:"abzcoding@gmail.com",commits:1},{name:"rebuilt",email:"memoryman51@hotmail.com",commits:1}]}}},6314:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><h2 id="install-syntax-highlighting" tabindex="-1"><a class="header-anchor" href="#install-syntax-highlighting" aria-hidden="true">#</a> Install Syntax Highlighting</h2><div class="language-vim ext-vim line-numbers-mode"><pre class="language-vim"><code><span class="token punctuation">:</span>TSInstall rust\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="install-language-server" tabindex="-1"><a class="header-anchor" href="#install-language-server" aria-hidden="true">#</a> Install Language Server</h2><div class="language-vim ext-vim line-numbers-mode"><pre class="language-vim"><code><span class="token punctuation">:</span>LspInstall rust_analyzer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="formatters" tabindex="-1"><a class="header-anchor" href="#formatters" aria-hidden="true">#</a> Formatters</h2><p>The configured formatter(s) must be installed separately.</p><p>Configuration in <code>~/.config/lvim/config.lua</code>:</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token comment">-- exe value can be &quot;rustfmt&quot;</span>\nlvim<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>rust<span class="token punctuation">.</span>formatters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> exe <span class="token operator">=</span> <span class="token string">&quot;rustfmt&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="lsp-settings" tabindex="-1"><a class="header-anchor" href="#lsp-settings" aria-hidden="true">#</a> LSP Settings</h2><div class="language-vim ext-vim line-numbers-mode"><pre class="language-vim"><code><span class="token punctuation">:</span>NlspConfig rust_analyzer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="debugger" tabindex="-1"><a class="header-anchor" href="#debugger" aria-hidden="true">#</a> Debugger</h2><div class="language-vim ext-vim line-numbers-mode"><pre class="language-vim"><code><span class="token punctuation">:</span>DIInstall ccppr_lldb\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token comment">-- ~/.config/lvim/ftplugin/rust.lua</span>\n<span class="token keyword">local</span> dap_install <span class="token operator">=</span> require <span class="token string">&quot;dap-install&quot;</span>\ndap_install<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="extra-plugins" tabindex="-1"><a class="header-anchor" href="#extra-plugins" aria-hidden="true">#</a> Extra Plugins</h2><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>override <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;rust&quot;</span> <span class="token punctuation">}</span>\nlvim<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    <span class="token string">&quot;simrat39/rust-tools.nvim&quot;</span><span class="token punctuation">,</span>\n    config <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;rust-tools&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        tools <span class="token operator">=</span> <span class="token punctuation">{</span>\n          autoSetHints <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n          hover_with_actions <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n          runnables <span class="token operator">=</span> <span class="token punctuation">{</span>\n            use_telescope <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        server <span class="token operator">=</span> <span class="token punctuation">{</span>\n          cmd <span class="token operator">=</span> <span class="token punctuation">{</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>stdpath <span class="token string">&quot;data&quot;</span> <span class="token operator">..</span> <span class="token string">&quot;/lsp_servers/rust/rust-analyzer&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          on_attach <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lvim.lsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>common_on_attach<span class="token punctuation">,</span>\n          on_init <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lvim.lsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>common_on_init<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">,</span>\n    ft <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rs&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',16),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);