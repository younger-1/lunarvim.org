"use strict";(self.webpackChunkLunarVim_com=self.webpackChunkLunarVim_com||[]).push([[6443],{89:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-755918ec",path:"/drafts/dap.html",title:"Configuring a debugger",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"cpp",slug:"cpp",children:[]}],filePathRelative:"drafts/dap.md",git:{updatedTime:1628188463e3,contributors:[{name:"christianchiarulli",email:"chrisatmachine@gmail.com",commits:1}]}}},4498:(n,a,s)=>{s.r(a),s.d(a,{default:()=>u});var p=s(6252);const e=(0,p._)("h1",{id:"configuring-a-debugger",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#configuring-a-debugger","aria-hidden":"true"},"#"),(0,p.Uk)(" Configuring a debugger")],-1),t=(0,p.Uk)("LunarVim uses nvim-dap for debugging. To set up your particular debugger, look here: "),o={href:"https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("link"),r=(0,p.uE)('<h2 id="cpp" tabindex="-1"><a class="header-anchor" href="#cpp" aria-hidden="true">#</a> cpp</h2><p>To set up a debug adapter for cpp, place this in your <code>config.lua</code></p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>dap<span class="token punctuation">.</span>on_config_done <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dap<span class="token punctuation">)</span>\n    dap<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>lldb <span class="token operator">=</span> <span class="token punctuation">{</span>\n      type <span class="token operator">=</span> <span class="token string">&#39;executable&#39;</span><span class="token punctuation">,</span>\n      command <span class="token operator">=</span> <span class="token string">&#39;/usr/bin/lldb-vscode&#39;</span><span class="token punctuation">,</span>\n      name <span class="token operator">=</span> <span class="token string">&quot;lldb&quot;</span>\n    <span class="token punctuation">}</span>\n\n    dap<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>cpp <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">{</span>\n            name <span class="token operator">=</span> <span class="token string">&quot;Launch&quot;</span><span class="token punctuation">,</span>\n            type <span class="token operator">=</span> <span class="token string">&quot;lldb&quot;</span><span class="token punctuation">,</span>\n            request <span class="token operator">=</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n            program <span class="token operator">=</span> <span class="token string">&quot;${workspaceFolder}/build/binary_name&quot;</span><span class="token punctuation">,</span>\n            cwd <span class="token operator">=</span> <span class="token string">&quot;${workspaceFolder}/build&quot;</span><span class="token punctuation">,</span>\n            stopOnEntry <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>\n            args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            runInTerminal <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    dap<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>c <span class="token operator">=</span> dap<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>cpp\n<span class="token keyword">end</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',3),l={},u=(0,s(3744).Z)(l,[["render",function(n,a){const s=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[c,(0,p.Wm)(s)])]),r],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,p]of a)n[s]=p;return n}}}]);