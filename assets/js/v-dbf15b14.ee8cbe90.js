"use strict";(self.webpackChunkLunarVim_com=self.webpackChunkLunarVim_com||[]).push([[5027],{6979:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-dbf15b14",path:"/drafts/enabling-a-language-server.html",title:"Enabling language servers",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"LSP errors",slug:"lsp-errors",children:[{level:3,title:"Understanding LspInfo",slug:"understanding-lspinfo",children:[]},{level:3,title:"Example configurations",slug:"example-configurations",children:[]},{level:3,title:"Last resort",slug:"last-resort",children:[]}]}],filePathRelative:"drafts/enabling-a-language-server.md",git:{updatedTime:1628188463e3,contributors:[{name:"christianchiarulli",email:"chrisatmachine@gmail.com",commits:1}]}}},1102:(e,n,s)=>{s.r(n),s.d(n,{default:()=>h});var a=s(6252);const l=(0,a.uE)('<h1 id="enabling-language-servers" tabindex="-1"><a class="header-anchor" href="#enabling-language-servers" aria-hidden="true">#</a> Enabling language servers</h1><p>Neovim comes bundled with a language client but not a language server. To install a supported language server:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>:LspInstall <span class="token code-snippet code keyword">`&lt;your_language_server&gt;`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Autocomplete works here. Type <code>:LspInstall</code>, then hit <code>TAB</code> to see supported language servers</p>',4),r=(0,a.Uk)("See "),t={href:"https://github.com/kabouzeid/nvim-lspinstall",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("LspInstall"),o=(0,a.Uk)(" for more info."),p=(0,a.uE)('<p>In order for Java LSP to work, edit <code>~/.local/share/nvim/lspinstall/java/jdtls.sh</code> and replace <code>WORKSPACE=&quot;$1&quot;</code> with <code>WORKSPACE=&quot;$HOME/workspace&quot;</code></p><p>Most common languages should be supported out of the box, if yours is not I would welcome a PR</p><h2 id="lsp-errors" tabindex="-1"><a class="header-anchor" href="#lsp-errors" aria-hidden="true">#</a> LSP errors</h2><p>LunarVim lists the attached lsp server in the bottom status bar. If it says ‘No client connected’ use :LspInfo to troubleshoot.</p><h3 id="understanding-lspinfo" tabindex="-1"><a class="header-anchor" href="#understanding-lspinfo" aria-hidden="true">#</a> Understanding LspInfo</h3><ol><li>Make sure there is a client attached to the buffer. 0 attached clients means lsp is not running</li><li>Active clients are clients in other files you have open</li><li>Clients that match the filetype will be listed. If installed with :LspInstall <code>&lt;servername&gt;</code> the language servers will be installed.</li><li>‘cmd’ must be populated. This is the language server executable. If the ‘cmd’ isn’t set or if it’s not executable you won’t be able to run the language server. <ul><li>In the example below ‘efm-langserver’ is the name of the binary that acts as the langserver. If we run ‘which efm-langserver’ and we get a location to the executable, it means the langauge server is installed and available globally.</li><li>If you know the command is installed AND you don’t want to install it globally you’ll need to manually set &#39;cmd&#39; in the language server settings.</li><li>Configurations are stored in ~/.config/nvim/lua/lsp/ The settings will be stored in a file that matches the name of the language. e.g. python-ls.lua</li><li>‘identified root’ must also be populated. Most language servers require you be inside a git repository for the root to be detected. If you don’t want to initialize the directory as a git repository, an empty .git/ folder will also work.</li></ul></li><li>Some language servers get set up on a per project basis so you may have to reinstall the language server when you move to a different project.</li></ol><h3 id="example-configurations" tabindex="-1"><a class="header-anchor" href="#example-configurations" aria-hidden="true">#</a> Example configurations</h3><p>[ ======== LSP NOT running ======== ]</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>0 client(s) attached to this buffer:\n\n0 active client(s):\n\nClients that match the filetype python:\n\n  Config: efm\n    cmd:               /Users/my-user/.local/share/nvim/lspinstall/efm/efm-langserver\n    cmd is executable: True\n    identified root:   None\n    custom handlers:\n\n  Config: pyright\n    cmd:               /Users/my-user/.local/share/nvim/lspinstall/python/node_modules/.bin/pyright-langserver --stdio\n    cmd is executable: True\n    identified root:   None\n    custom handlers:   textDocument/publishDiagnostics\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><hr><p>[ ======== LSP IS running ======== ]</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>2 client(s) attached to this buffer: pyright, efm\n\n  Client: pyright (id 1)\n  \troot:      /home/my-user/workspace/canary\n  \tfiletypes: python\n  \tcmd:       /home/my-user/.local/share/nvim/lspinstall/python/node_modules/.bin/pyright-langserver --stdio\n\n\n  Client: efm (id 2)\n  \troot:      /home/my-user/workspace/canary\n  \tfiletypes: lua, python, javascriptreact, javascript, typescript, typescriptreact, sh, html, css, json, yaml, markdown, vue\n  \tcmd:       /home/my-user/.local/share/nvim/lspinstall/efm/efm-langserver\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="last-resort" tabindex="-1"><a class="header-anchor" href="#last-resort" aria-hidden="true">#</a> Last resort</h3><p>If you still have problems after implementing the above measures, rule out plugin problems with the following. This reinstalls your plugins and language servers.</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>rm -rf <span class="token strike"><span class="token punctuation">~</span><span class="token content">/.local/share/lunarvim/site\nrm -rf </span><span class="token punctuation">~</span></span>/.local/share/nvim/lspinstall\n<span class="token title important"><span class="token punctuation">#</span> Open neovim and run the following</span>\n:PackerSync\n:LspInstall python   <span class="token code-snippet code keyword">`&lt;-- REPLACE WITH YOUR OWN LANGUAGE`</span>\n:LspInstall efm      <span class="token code-snippet code keyword">`&lt;-- REPLACE WITH YOUR OWN LANGUAGE`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',15),c=(0,a.Uk)("For a more in depth LSP support: "),u={href:"https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("link"),m={},h=(0,s(3744).Z)(m,[["render",function(e,n){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[r,(0,a._)("a",t,[i,(0,a.Wm)(s)]),o]),p,(0,a._)("p",null,[c,(0,a._)("a",u,[d,(0,a.Wm)(s)])])],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{for(const[s,a]of n)e[s]=a;return e}}}]);